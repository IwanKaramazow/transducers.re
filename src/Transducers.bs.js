// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function xmap(f, xf, r, a) {
  return Curry._2(xf, r, Curry._1(f, a));
}

function xfilter(predicate, xf, r, a) {
  if (Curry._1(predicate, a)) {
    return Curry._2(xf, r, a);
  } else {
    return r;
  }
}

function transduce(xform, f, init, coll) {
  return List.fold_left(Curry._1(xform, f), init, coll);
}

function compose(f, g) {
  return (function (x) {
      return Curry._1(f, Curry._1(g, x));
    });
}

function $great$great$great(g, f) {
  return (function (x) {
      return Curry._1(f, Curry._1(g, x));
    });
}

function conj(xs, x) {
  return Pervasives.$at(xs, /* :: */[
              x,
              /* [] */0
            ]);
}

function xlist(xform, initOpt, coll) {
  var init = initOpt !== undefined ? initOpt : /* [] */0;
  return List.fold_left(Curry._1(xform, conj), init, coll);
}

var Naive = {
  xmap: xmap,
  xfilter: xfilter,
  transduce: transduce,
  compose: compose,
  $great$great$great: $great$great$great,
  conj: conj,
  xlist: xlist
};

function inc(x) {
  return x + 1 | 0;
}

function unwrap_optional(x) {
  if (x !== undefined) {
    return x;
  } else {
    return 0;
  }
}

function filter_numbers(x) {
  return x !== undefined;
}

var maybe_numbers = /* :: */[
  1,
  /* :: */[
    undefined,
    /* :: */[
      2,
      /* :: */[
        undefined,
        /* [] */0
      ]
    ]
  ]
];

function f(param, param$1, param$2) {
  return Curry._2(param, param$1, param$2 !== undefined ? param$2 : 0);
}

function g(param, param$1, param$2) {
  return Curry._2(param, param$1, param$2 + 1 | 0);
}

function xf(x) {
  return (function (param, param$1) {
      var param$2 = function (param$3, param$4) {
        return f((function (param, param$1) {
                      return g(x, param, param$1);
                    }), param$3, param$4);
      };
      return xfilter(filter_numbers, param$2, param, param$1);
    });
}

var only_incremented_numbers = xlist(xf, undefined, maybe_numbers);

exports.Naive = Naive;
exports.inc = inc;
exports.unwrap_optional = unwrap_optional;
exports.filter_numbers = filter_numbers;
exports.maybe_numbers = maybe_numbers;
exports.xf = xf;
exports.only_incremented_numbers = only_incremented_numbers;
/* only_incremented_numbers Not a pure module */
